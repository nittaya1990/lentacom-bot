from io import BytesIO

from PIL import Image
from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery, ContentType
from pyzbar.pyzbar import decode

from lenta.client import LentaClient
from tgbot import services
from tgbot.callbacks.profile import add_sku_cb, delete_sku_cb
from tgbot.keyboards import buttons
from tgbot.keyboards.sku import get_sku_keyboard
from tgbot.services.repository import Repo


async def add_sku(query: CallbackQuery, repo: Repo, callback_data: dict[str, str]):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    sku_id = callback_data["sku_code"]
    await repo.add_sku_to_user(query.from_user.id, sku_id)
    await query.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
    sku_keyboard = await get_sku_keyboard(query.from_user.id, sku_id, repo)
    await query.message.edit_reply_markup(sku_keyboard)


async def delete_sku(query: CallbackQuery, repo: Repo, callback_data: dict[str, str]):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    sku_id = callback_data["sku_code"]
    await repo.delete_user_sku(query.from_user.id, sku_id)
    await query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
    sku_keyboard = await get_sku_keyboard(query.from_user.id, sku_id, repo)
    await query.message.edit_reply_markup(sku_keyboard)


async def show_user_store(msg: Message, repo: Repo, lenta: LentaClient):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param msg:
    :param repo:
    :param lenta:
    :return:
    """
    user_id = msg.from_user.id
    store = await services.profile.get_store_for_user(lenta, repo, user_id)
    if not store:
        await msg.answer("–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω")
        return
    await msg.answer_location(latitude=store.lat, longitude=store.long)
    await msg.answer(services.messages.get_store_info_message(store))


async def show_sku_info_by_photo(msg: Message, lenta: LentaClient, repo: Repo):
    user_id = msg.from_user.id
    store = await services.profile.get_store_for_user(lenta, repo, user_id)
    blob = BytesIO()
    await msg.photo[-1].download(destination_file=blob)
    image = Image.open(blob)
    barcodes = decode(image)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π barcode
    barcode = barcodes[0] if barcodes else None
    if barcode is None:
        await msg.answer("–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —à—Ç—Ä–∏—Ö –∫–æ–¥")
        return

    store = await services.profile.get_store_for_user(lenta, repo, user_id)
    if store is None:
        await msg.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω")
        return

    sku = await lenta.get_sku_in_store_by_barcode(store.id, barcode.data.decode())
    if not sku:
        await msg.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    sku_message_info = services.messages.get_sku_info_message(sku, barcode.data.decode())
    sku_keyboard = await get_sku_keyboard(msg.from_user.id, sku.code, repo)

    await msg.answer_photo(sku.image.medium, caption=sku_message_info, reply_markup=sku_keyboard)


async def show_user_skus(msg: Message, lenta: LentaClient, repo: Repo):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    skus = await services.profile.get_user_skus(msg.from_user.id, repo, lenta)
    skus_info_message = services.messages.get_sku_list_message("üóí –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", skus, True)
    await msg.answer(skus_info_message)


def register_profile(dp: Dispatcher):
    dp.register_message_handler(show_user_store, text=buttons.MY_STORE)
    dp.register_message_handler(show_sku_info_by_photo, content_types=ContentType.PHOTO)
    dp.register_message_handler(show_user_skus, text=buttons.MY_SKUS)

    dp.register_callback_query_handler(add_sku, add_sku_cb.filter(), state="*")
    dp.register_callback_query_handler(delete_sku, delete_sku_cb.filter(), state="*")
