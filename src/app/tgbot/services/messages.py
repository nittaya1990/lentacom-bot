from typing import Optional

import aiogram.utils.markdown as md

from lenta.models import Store, BaseSku
from lenta.utils import translate_sku_stock, parse_weight_from_barcode


def get_store_info_message(store: Store) -> str:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ
    :param store: –ú–∞–≥–∞–∑–∏–Ω
    :return: –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ
    """
    return md.text("üè¢ –ì–æ—Ä–æ–¥:", md.escape_md(store.city_name), "\n",
                   "üìç –ê–¥—Ä–µ—Å:", md.escape_md(store.address), "\n",
                   "üïì –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:", md.text(store.opens_at), md.escape_md("-"), md.text(store.closes_at),
                   sep="")


def get_sku_info_message(sku: BaseSku, barcode: Optional[str] = None, add_detail_command: bool = False) -> str:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
    :param sku: –¢–æ–≤–∞—Ä
    :param barcode: –ó–Ω–∞—á–µ–Ω–∏–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
    :param add_detail_command: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
    :return: –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
    """
    discount = round(sku.regular_price - sku.discount_price, 2) if sku.discount_price else None
    stock = translate_sku_stock(sku.stock)
    msg_parts = []
    price = sku.discount_price if sku.discount_price else sku.regular_price
    postfix_price = "–∫–≥." if sku.is_weight_product else "—à—Ç."
    price_str = md.text(md.escape_md(sku.discount_price), md.strikethrough(sku.regular_price)) \
        if sku.discount_price else sku.regular_price

    if barcode:
        msg_parts.append(md.escape_md("üéπ –®—Ç—Ä–∏—Ö-–∫–æ–¥:", md.bold(barcode)))

    msg_parts.extend([
        md.text("‚ÑπÔ∏è –¢–æ–≤–∞—Ä:", md.escape_md(sku.title)),
        md.text("üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", stock),
    ])

    if sku.is_weight_product and barcode:
        weight = parse_weight_from_barcode(barcode)
        price_on_kg = round(weight * price, 2)
        price_msg_part = md.text("üíµ –¶–µ–Ω–∞:", md.escape_md(price_on_kg), "–∑–∞", md.escape_md(weight, "–∫–≥."))

    else:
        price_msg_part = md.text("üíµ –¶–µ–Ω–∞:", price_str, "–∑–∞", md.escape_md(postfix_price))
    msg_parts.append(price_msg_part)

    if discount:
        msg_parts.extend([
            md.text("üéÅ –°–∫–∏–¥–∫–∞:", md.escape_md(discount))
        ])
    if sku.promo_type != "None":
        msg_parts.append(
            md.text("üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏:", md.escape_md(sku.validity_end_date.strftime("%d.%m.%Y")))
        )

    if add_detail_command:
        msg_parts.extend([
            md.escape_md("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É:", f"/detail_{sku.code}")
        ])

    return md.text(*msg_parts, sep="\n")


def get_sku_list_message(title: str, skus: list[BaseSku], add_detail_command: bool = False) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    msg_parts = [title]
    msg_parts.extend([get_sku_info_message(sku, add_detail_command=add_detail_command) for sku in skus])

    return md.text(*msg_parts, sep="\n\n")
